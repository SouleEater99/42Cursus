#include "../include/push_swap.h"

void	ft_swap(t_list **stack, char c)
{
	t_list	*tmp;

	if (ft_lstsize(*stack) >= 2)
	{
		tmp = (*stack)->next;
		(*stack)->next = tmp->next;
		tmp->next = *stack;
		*stack = tmp;
		if (c == 'a')
			write(1, "sa\n", 3);
		else if (c == 'b')
			write(1, "sb\n", 3);
		else if (c == '2')
			write(1, "ss\n", 3);
		ft_update_index(*stack);
	}
}

void	ft_push(t_list **stack_1, t_list **stack_2, char c)
{
	t_list	*tmp;
	t_list	*tmp2;

	if (*stack_1)
	{
		tmp = (*stack_1)->next;
		tmp2 = *stack_1;
		tmp2->next = *stack_2;
		*stack_2 = tmp2;
		*stack_1 = tmp;
		(*stack_1)->prev = NULL;
		if (c == 'a')
			write(1, "pa\n", 3);
		else if (c == 'b')
			write(1, "pb\n", 3);
		ft_update_index(*stack_1);
		ft_update_index(*stack_2);

	}
}

void	ft_rotation(t_list **stack, char c)
{
	t_list	*tmp;

	if (*stack && (*stack)->next)
	{
		tmp = ft_lstlast(*stack);
		tmp->next = *stack;
		(*stack)->prev = tmp;
		tmp = (*stack)->next;
		tmp->prev = NULL;
		(*stack)->next = NULL;
		*stack = tmp;
		if (c == 'a')
			write(1, "ra\n", 3);
		else if (c == 'b')
			write(1, "rb\n", 3);
		else if (c == '2')
			write(1, "rr\n", 3);
		ft_update_index(*stack);

	}
}

void	ft_reverse_rotation(t_list **stack, char c)
{
	t_list	*last;
	t_list	*before_last;

	if (*stack && (*stack)->next)
	{
		last = ft_lstlast(*stack);
		(*stack)->prev = last;
		before_last = *stack;
		while (before_last->next && before_last->next != last)
			before_last = before_last->next;
		before_last->next = NULL;
		last->next = *stack;
		*stack = last;
		last->prev = NULL;
		if (c == 'a')
			write(1, "rra\n", 4);
		else if (c == 'b')
			write(1, "rrb\n", 4);
		else if (c == '2')
			write(1, "rrr\n", 4);
		ft_update_index(*stack);
	}
}

void	ft_update_index(t_list *head)
{
	int	i;

	i = 0;
	while (head)
	{
			head->index = i;
			i++;
			head = head->next;
	}
}

#include "../include/push_swap.h"

void    ft_lstadd_back(t_list **lst, t_list *new)
{
        t_list  *node;

        if (lst)
        {
                node = *lst;
                if (!*lst)
                        *lst = new;
                else
                {
                        while (node->next)
                                node = node->next;
                        node->next = new;
                        new->prev = node;
                }
        }
}

t_list  *ft_lstnew(int  nbr)
{
        t_list  *node;

        node = (t_list *)malloc(sizeof(t_list));
        if (!node)
                return (NULL);
        node->nbr = nbr;
        node->next = NULL;
        node->prev = NULL;
        return (node);
}

void    ft_lstclear(t_list **lst, void (*del)(void *))
{
        t_list  *tmp;
        t_list  *to_free;

        if (lst && del)
        {
                to_free = *lst;
                while (to_free)
                {
                        tmp = to_free->next;
                        free(to_free);
                        to_free = tmp;
                }
                *lst = NULL;
        }
}

int     ft_lstsize(t_list *lst)
{
        int     i;

        i = 1;
        if (!lst)
                return (0);
        while (lst->next)
        {
                lst = lst->next;
                i++;
        }
        return (i);
}

t_list  *ft_lstlast(t_list *lst)
{
        if (lst)
                while (lst->next)
                        lst = lst->next;
        return (lst);
}


char    *ft_strjoin_2(char *str1, char *str2)
{
        int             i;
        int             len_1;
        char    *new;

        if (!str2)
                return (NULL);
        if (!str1)
                len_1 = 0;
        else
                len_1 = ft_strlen(str1) + 1;
        i = -1;
        new = malloc(len_1 + ft_strlen(str2) + 1);
        if (!new)
                return (NULL);
        while (str1 && str1[++i])
                new[i] = str1[i];
        if (str1)
                new[i] = ' ';
        i = -1;
        while (str2[++i])
                new[len_1 + i] = str2[i];
        new[len_1 + i] = '\0';
        if (str1)
                free(str1);
        return (new);
}
